DB context file
---------------------
public class UserDBContext : DbContext
{
	public UserDBContext(DbContextOptions<UserDBContext> options) : base(options)
	{

	}
	public DbSet<User> Users { get; set; }
}

appsettings.json
------------------
"ConnectionStrings": {
    "BlogSiteDB": ""
  }
  
program.cs
------------------
builder.Services.AddDbContext<UserDBContext>(o => o.UseSqlServer(builder.Configuration.GetConnectionString("BlogSiteDB")));

Migration syntax for code first approach
----------------------------------------------
1. Add-Migration Registrationservice.UserDBContext
2. update-database
after above two steps the database will creatae a table called Users with the column names similar to property names of User class.

How to access DB set
-----------------------
Inject the class which is inherited from DbContext class in the class file which is implemented by interface.

How to allow only authorized access
------------------------------------------------
using Microsoft.AspNetCore.Authentication.JwtBearer;

builder.Services.AddAuthentication(x =>
{
    x.DefaultAuthenticateScheme = "TestKey";
    x.DefaultChallengeScheme = "TestKey";
}).AddJwtBearer("TestKey", o =>
{
    var key = Encoding.UTF8.GetBytes(builder.Configuration["JWT:Key"]);
    o.SaveToken = true;
    o.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = false,
        ValidateAudience = false,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["JWT:Issuer"],
        ValidAudience = builder.Configuration["JWT:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(key)
    };
});

app.UseAuthentication();
app.UseAuthorization();
